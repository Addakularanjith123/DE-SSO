{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Addakularanjith123/DE-SSO/blob/main/Operators%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BIlYtG4CrIhx"
      },
      "source": [
        "#Authenticate to GCP\n",
        "\n",
        "Colab allows you to perform operations on Google Cloud Platform via GCP APIs. You must first authenticate to a project you have the appropriate permissions to. Learn more about GCP projects [here](https://cloud.google.com/resource-manager/docs/creating-managing-projects)."
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iWcoZAwjNhqw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hellow Ranjith\")\n"
      ],
      "metadata": {
        "id": "UNViWRA4LtIE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u3OGMjZtm4Pg"
      },
      "outputs": [],
      "source": [
        "from google.colab import auth\n",
        "PROJECT_ID = \"\" # @param {type: \"string\"}\n",
        "auth.authenticate_user(project_id=PROJECT_ID)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Ranjith Addakula\")"
      ],
      "metadata": {
        "id": "KI-2NtkEK5lz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "SrE9ilYONIfR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # # a='hyd'\n",
        "# # # print(a*2)\n",
        "# # # print(a*0)\n",
        "# # # print(a*-1)\n",
        "# # # print((True+True)*'Hye')\n",
        "# # # print(len('Hyd'))\n",
        "# # # # print(len(2131))\n",
        "\n",
        "# # # a='Sankar Dayal Sarma'\n",
        "# # # print(a[1:10:2])\n",
        "# # # print(a[1::2])\n",
        "# # # print(a[-5:-1])\n",
        "# # # print(a[::-1])\n",
        "# # # print(a[-1:-5:-1])\n",
        "# # # print(a[3:-3])\n",
        "# # # print(a[-1:-5])\n",
        "# # # print(\"Ranjith\")\n",
        "# # # print(a[-1:-1])\n",
        "# # # print(\"Addakula\")\n",
        "\n",
        "print(\"Hellow Ranjith\")\n",
        "\n",
        "\n",
        "# # # a='Hyd'\n",
        "# # # print(a,id(a))\n",
        "# # # a=a*3\n",
        "# # # print(a,id(a))\n",
        "# # a='A'\n",
        "# # print(a[1])\n",
        "# print(int('0000075'))\n",
        "\n",
        "# print(0b11010)\n",
        "# print(int(0o6247))\n",
        "# print(int(0xa7b9))\n",
        "# print(0xa7b9)\n",
        "# print(float(3+4j))\n",
        "# print(int('Ten'))\n",
        "# print(int(4j))\n",
        "# print(int('2.3'))\n",
        "\n",
        "# # print(complex(3,4))\n",
        "# print(complex(5,3.8))\n",
        "# print(complex(3.2,4.2))\n",
        "# print(complex(False))\n",
        "\n",
        "# print(complex(True,4))\n",
        "# print(complex('3'))\n",
        "\n",
        "\n",
        "\n",
        "# a=range(10,50,5)\n",
        "# print(a)\n",
        "# print(type(a))\n",
        "# print(*a)\n",
        "# print(len(a))\n",
        "# print(*a[2:7])\n",
        "# # a[4]=23\n",
        "# # print(a*2)\n",
        "\n",
        "# a=range(10,20)\n",
        "# print(*a,sep=',')\n",
        "# b=range(5)\n",
        "# print(*b)\n",
        "# c=range(10,1,-1)\n",
        "# print(*c,sep='...')\n",
        "# print(\"Ranjith\")\n",
        "# d=range(-10)\n",
        "# print(*d)\n",
        "# print(\"Addakula\")\n",
        "# f=range(2,2)\n",
        "# print(*f)\n",
        "# print(\"Kumar\")\n",
        "# g=range(10,11,0.1)\n",
        "# print(*g)\n",
        "# h=range('A','F')\n",
        "\n",
        "# r=range(10,17,3)\n",
        "# print(*r)\n",
        "# x,y,z=r\n",
        "# print(x)\n",
        "# a,b,c=r\n",
        "# print(a,b,c)\n",
        "# # r=range(3)\n",
        "# print(*r)\n",
        "# x,y,x=r\n",
        "# print(x)\n",
        "# # p,q,r,s=r\n",
        "# # print(*q)\n",
        "r=range(3)\n",
        "# x,y=r\n",
        "# x,y,z=*r\n",
        "# r=range(10,17,3)\n",
        "# print(*r)\n",
        "# x,y=r\n",
        "# print(x,y)\n",
        "# a,b,c=r\n",
        "# print(a,b,c)\n",
        "\n",
        "# a='ranjith'\n",
        "# print(id(a))\n",
        "# a='addakula'\n",
        "# print(id(a))\n",
        "# # a[1]='d'\n",
        "# a='sec'\n",
        "# print(id(a))\n",
        "# print(a)\n",
        "# a=\"kumar\"\n",
        "# print(id(a))\n",
        "\n",
        "# for i in range(5):\n",
        "#   print(i,\"ranjith\")\n",
        "\n",
        "\n",
        "\n",
        "# a=99.3\n",
        "# print(id(a))\n",
        "# print(a)\n",
        "# a=89823.98\n",
        "# print(id(a))\n",
        "\n",
        "\n",
        "# print('HYD'<'hyd')\n",
        "# print('' or 3)\n",
        "# print(6j or 'Ranjith')\n",
        "# a={\n",
        "#     print(\"ranjit\"),\n",
        "#     print(\"addakula\")\n",
        "#   }\n",
        "# print(a)\n",
        "\n",
        "# x=(910,20,40,322,23)\n",
        "# print(x)\n",
        "# # x[2]=50\n",
        "# print(x)\n",
        "# c=range(4)\n",
        "# print(id(c))\n",
        "# print(type(c))\n",
        "# print(c)\n",
        "\n",
        "# a='33'\n",
        "# b='33',44\n",
        "# print(a is b)\n",
        "\n",
        "# a=False\n",
        "# b=False\n",
        "# print(a is b)\n",
        "\n",
        "\n",
        "# a=[22,'33',\"ranjith\"]\n",
        "# b=[22,'33',\"ranjith\"]\n",
        "# print(a is b)\n"
      ],
      "metadata": {
        "id": "By-lUsVJK5ZL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "_ugTCdvCNMcw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Operators\n",
        "-------------\n",
        "1) Arithmetic  operators  --->   + , - , * , / , % , ** , //\n",
        "\n",
        "2) Relational  operators  --->  > , < , == , >= , <= , !=\n",
        "\n",
        "3) Logical  operators  --->   and , or , not\n",
        "\n",
        "4) Assignment  operators  ---> = , += , -= , *= , /= , %= , **= , //=\n",
        "\n",
        "5) Identity  operators  --->  is , is  not\n",
        "\n",
        "6) Membership operators  ---> in , not  in\n",
        "\n",
        "7) Ternary  operator  --->   op1  if  cond  else  op2\n",
        "\n",
        "8) Walrus  operator  --->   :=\n",
        "\n",
        "9) Bitwise  operators  --->   & , | , ^ , ~ , << , >>"
      ],
      "metadata": {
        "id": "gmudZiGANRiL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Find outputs (Home work)\n",
        "print(10 + 20) # 30\n",
        "print(10.8 + 20.6) #  31.4\n",
        "print(3 + 4j + 5 + 6j) # 8+10j\n",
        "print(True + False) #  1 + 0 = 1\n",
        "print('Hyder' + 'abad') # Hyderabad\n",
        "print('Sankar' + 'Dayal' + 'Sarma') #SankarDayalSarma\n",
        "print('10' + '20') # 1020\n",
        "print([10 , 20 , 30] + [1 , 2 , 3]) # [10, 20, 30, 1, 2, 3]\n",
        "print((25 , 10.8 , 'Hyd') + (3 + 4j , True , None)) # (25, 10.8, 'Hyd', (3+4j), True, None)\n",
        "#print({10 , 20} + {30 , 40}) # Error : sets  cannot be concatenated  with  +  operator\n",
        "#print({10 : 'Hyd'} + {20 : 'Sec'}) # Error : dictionaries cannot be concatenated  with  + operator\n",
        "#print(range(4) + range(5))  # Error  :  range  objects  cannot be  concatenated\n",
        "#print(10 + '20') # Error :  Operand2  should  be  a  non-sequence   as  operand1   is  a  non-sequence\n",
        "#print([10 , 20 , 30] + 5) # Error :  list  and  int  can  not  be  concatenated\n",
        "#print([10 , 20 , 30] + (40 , 50 , 60)) # Error  :  list  and   tuple  can  not  be  concatenated"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_o5gOInHNX_u",
        "outputId": "1395a780-525b-4da6-d362-96938b9883bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30\n",
            "31.400000000000002\n",
            "(8+10j)\n",
            "1\n",
            "Hyderabad\n",
            "SankarDayalSarma\n",
            "1020\n",
            "[10, 20, 30, 1, 2, 3]\n",
            "(25, 10.8, 'Hyd', (3+4j), True, None)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0gUXgKu-NnYG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "55yzqeFmNn1m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0bLuxri1Np5J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "M5sgjEDRNvSo"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}